// v0.4_clock.js
// Este arquivo cont√©m a l√≥gica principal para o seu despertador.
// Ele depende de 'v0.3_time.js' para os carross√©is de sele√ß√£o de tempo.

/**
 * Solicita permiss√£o para exibir notifica√ß√µes da √°rea de trabalho e as exibe.
 * @param {string} title - O t√≠tulo da notifica√ß√£o.
 * @param {string} body - O corpo (conte√∫do) da notifica√ß√£o.
 */
function showDesktopNotification(title, body) {
    if (!("Notification" in window)) {
        console.warn("Este navegador n√£o suporta notifica√ß√µes de desktop.");
        return;
    }

    if (Notification.permission === "granted") {
        console.log("Permiss√£o de notifica√ß√£o j√° concedida. Exibindo notifica√ß√£o...");
        new Notification(title, { body: body });
    } else if (Notification.permission === "denied") {
        console.warn("Permiss√£o de notifica√ß√£o negada. N√£o √© poss√≠vel exibir.");
    } else {
        Notification.requestPermission().then(permission => {
            if (permission === "granted") {
                console.log("Permiss√£o de notifica√ß√£o concedida! Exibindo notifica√ß√£o...");
                new Notification(title, { body: body });
            } else if (permission === "denied") {
                console.warn("Permiss√£o de notifica√ß√£o negada. N√£o √© poss√≠vel exibir.");
            } else {
                console.log("Permiss√£o de notifica√ß√£o n√£o concedida.");
            }
        }).catch(error => {
            console.error("Erro ao solicitar permiss√£o de notifica√ß√£o:", error);
        });
    }
}


// L√≥gica Principal do Despertador
document.addEventListener('DOMContentLoaded', () => {
    // --- Verifica√ß√µes de Depend√™ncia ---
    // Verificamos se as fun√ß√µes globais do v0.3_time.js est√£o dispon√≠veis.
    if (typeof window.getSelectedHour !== 'function' || typeof window.getSelectedMinute !== 'function' || typeof window.setInitialTime !== 'function') {
        console.error("Erro: As fun√ß√µes do carrossel (getSelectedHour, getSelectedMinute, setInitialTime) n√£o foram carregadas corretamente. Certifique-se de que 'v0.3_time.js' esteja vinculado ANTES deste script no HTML.");
        document.getElementById('status-message').textContent = 'Erro de Inicializa√ß√£o: Script do carrossel ausente.';
        return; // Interrompe a execu√ß√£o se as depend√™ncias n√£o forem atendidas
    }

    // --- Refer√™ncias aos Elementos da UI ---
    const setAlarmButton = document.getElementById('setAlarmButton');
    const statusMessage = document.getElementById('status-message');
    const currentTimeDisplay = document.getElementById('current-time');

    // Refer√™ncias para as op√ß√µes de pausa e seus campos
    const opcaoDuracaoRadio = document.getElementById('opcao-duracao');
    const opcaoFimRadio = document.getElementById('opcao-fim');
    const camposDuracao = document.getElementById('campos-duracao');
    const camposFim = document.getElementById('campos-fim');

    let alarmSet = false;      // Estado para rastrear se um alarme est√° ativo
    let alarmHour;             // Hora armazenada do alarme definido
    let alarmMinute;           // Minuto armazenado do alarme definido
    let mainClockIntervalId;   // ID para o setInterval que atualiza a hora atual

    // --- Fun√ß√µes da UI para a L√≥gica de Pausa ---

    /**
     * Alterna a visibilidade dos campos de dura√ß√£o da pausa ou de hora de t√©rmino com base na sele√ß√£o do bot√£o de r√°dio.
     */
    function togglePauseFields() {
        if (opcaoDuracaoRadio && opcaoDuracaoRadio.checked) {
            if (camposDuracao) camposDuracao.style.display = 'flex';
            if (camposFim) camposFim.style.display = 'none';
        } else if (opcaoFimRadio && opcaoFimRadio.checked) {
            if (camposDuracao) camposDuracao.style.display = 'none';
            if (camposFim) camposFim.style.display = 'flex';
        }
    }

    // Adiciona ouvintes para os bot√µes de r√°dio para alternar a visibilidade do campo
    if (opcaoDuracaoRadio) {
        opcaoDuracaoRadio.addEventListener('change', togglePauseFields);
    }
    if (opcaoFimRadio) {
        opcaoFimRadio.addEventListener('change', togglePauseFields);
    }

    // Define o estado inicial dos campos de pausa quando a p√°gina √© carregada
    togglePauseFields();

    // --- Fun√ß√µes Principais do Alarme ---

    /**
     * Atualiza a exibi√ß√£o da hora atual e verifica se o alarme deve ser acionado.
     */
    function updateCurrentTime() {
        const now = new Date();
        const hours = String(now.getHours()).padStart(2, '0');
        const minutes = String(now.getMinutes()).padStart(2, '0');
        const seconds = String(now.getSeconds()).padStart(2, '0');
        currentTimeDisplay.textContent = `Hora Atual: ${hours}:${minutes}:${seconds}`;

        // Verifica se o alarme est√° ativo e se a hora atual corresponde √† hora do alarme
        if (alarmSet && now.getHours() === alarmHour && now.getMinutes() === alarmMinute && now.getSeconds() === 0) {
            triggerAlarm();
            alarmSet = false; // Desativa o alarme ap√≥s o disparo
            statusMessage.textContent = 'Alarme disparado!';
            setAlarmButton.textContent = 'Definir Alarme';
        }
    }

    /**
     * Define o alarme usando os valores dos carross√©is principais de horas e minutos.
     */
    function setAlarm() {
        // Usa as fun√ß√µes globais fornecidas por v0.3_time.js
        const hour = window.getSelectedHour();
        const minute = window.getSelectedMinute();

        if (hour === null || minute === null) {
            statusMessage.textContent = 'Por favor, selecione uma hora de alarme v√°lida.';
            return;
        }

        alarmHour = hour;
        alarmMinute = minute;
        alarmSet = true;

        const formattedAlarmTime = `${String(alarmHour).padStart(2, '0')}:${String(alarmMinute).padStart(2, '0')}`;
        statusMessage.textContent = `Alarme definido para ${formattedAlarmTime}`;
        setAlarmButton.textContent = 'Alarme Definido (Clique para Cancelar)';

        // Notifica√ß√£o de desktop para confirma√ß√£o do alarme
        showDesktopNotification("‚è∞ Alarme Definido!", `Seu alarme est√° definido para: ${formattedAlarmTime}`);
    }

    /**
     * Dispara o alarme: toca um som e exibe uma notifica√ß√£o.
     */
    function triggerAlarm() {
        console.log('Alarme tocando!');
        showDesktopNotification(
            "üîî Acorde!",
            "S√£o " + String(alarmHour).padStart(2, '0') + ":" + String(alarmMinute).padStart(2, '0')
        );

        const audio = new Audio('https://www.soundjay.com/buttons/beep-07.mp3');
        audio.play().catch(e => console.error("Erro ao reproduzir √°udio:", e));

        setTimeout(() => {
            audio.pause();
            audio.currentTime = 0; // Reinicia o √°udio para a pr√≥xima reprodu√ß√£o
        }, 5000); // Para de tocar ap√≥s 5 segundos
    }

    // --- Ouvintes de Eventos ---

    // Ouvinte para o bot√£o "Definir Alarme" / "Cancelar Alarme"
    if (setAlarmButton) {
        setAlarmButton.addEventListener('click', () => {
            if (alarmSet) {
                // Se o alarme estiver definido, cancele-o.
                alarmSet = false;
                statusMessage.textContent = 'Alarme cancelado.';
                setAlarmButton.textContent = 'Definir Alarme';
            } else {
                setAlarm(); // Caso contr√°rio, defina o alarme
            }
        });
    }

    // --- Inicializa√ß√£o ao Carregar a P√°gina ---

    // Define a hora inicial dos carross√©is principais para a hora atual do sistema.
    // Esta fun√ß√£o √© fornecida por v0.3_time.js.
    const now = new Date();
    window.setInitialTime(now.getHours(), now.getMinutes());

    // Inicia o intervalo do rel√≥gio principal para atualizar a exibi√ß√£o da hora atual a cada segundo.
    // Isso √© executado continuamente, independentemente do estado do alarme.
    mainClockIntervalId = setInterval(updateCurrentTime, 1000);

    // Chamada inicial para atualizar a exibi√ß√£o da hora imediatamente ao carregar
    updateCurrentTime();
});
